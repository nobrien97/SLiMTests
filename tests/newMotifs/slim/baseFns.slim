// General functions useful for quantitative population genetics - network models

function (void) setCfgParam(s$ name, ifls value) {
	// Automate defining constants for SLiMgui and slim command line
	
	if (!exists(name)) {
		defineConstant(name, value);
	}
}

function (void) writeTimeData(void) {
	curTime = clock() - beginTime;
	tFile = paste(sim.cycle, asString(seed), modelindex, curTime, sep = ",");
	writeFile(outTime, tFile, append = T);
}

// Get the locus cutoffs for each  
function (integer) getMolMutCutoffs(i$ molMuts) {
	molMutres = integer(molMuts); 
	molMutProp = 1/molMuts;

	for (i in seqLen(molMuts))
	{
		if (i == 0)
		{
			molMutres[i] = asInteger(ceil(molMutProp * nloci));
			next;
		}
		
		if (i == molMuts-1)
		{
			molMutres[i] = nloci;
			next;
		}
		
		molMutres[i] = asInteger(ceil(molMutProp * nloci)) + molMutres[i-1];
	}
	
	// if the first element has 0 loci, remove it
	if (molMutres[0] == 0) {
		molMutres = molMutres[1:(length(molMutres)-1)];
	}
	
	// Ensure we don't go over nloci
	molMutres[molMutres > nloci] = nloci; 
	
	// Remove extras in case we don't have all the molecular components (e.g. molMutProp has zeros) 
	molMutres = unique(molMutres);

	return molMutres;
}

function (void) assignQTLPositions(void) {
	// mol traits are in order: first molMutProp[0]% are alpha, next molMutProp[1]% are beta, then KZ, then KXZ
	// figure out the actual cutoffs 
	// molMuts == 7 for NAR and PAR
	molMuts = 7;

	// Set molMuts for different motifs
	if (modelType == "FFLC1" | modelType == "FFLI1") {
		molMuts = 9;
	}

	if (modelType == "FFBH") {
		molMuts = 11;
	}

	molMutres = getMolMutCutoffs(molMuts);
	defineConstant("molMutCutoffs", c(0, molMutres-1)); // convert to zero-indexed


	// Define locations of QTLs, deleterious loci, and neutral loci
	lengthvec = 0:(genomelength - 1);
	pos = sample(lengthvec, nloci);
	
	defineConstant("pos_QTL", pos); //store these positions in a sim value
				
	posfile = paste(modelindex, asString(seed), nloci, pos_QTL, sep = ","); // Output information on where the QTLs are, and the recombination structure of the genome
	
	writeFile(outPositions, posfile, append = T);	
	
	// Define constants for plotting heterozygosity (diagnostics)
	if (printH == T) {
		sim.setValue("h2_history", NULL);
		defineConstant("pngPath", writeTempFile("plot_", ".png", ""));
		if (exists("slimgui"))
			slimgui.openDocument(pngPath);
	}

	// Set delta difference value
	sim.setValue("lastDist", 0.0);
	sim.setValue("lastw", 0.0);
	
	// Set initial sample rates for adaptive sampling
	if (adaptiveSampling == T) {
		sim.setValue("sRate", samplerate);
		sim.setValue("burnDelta", NULL);
		sim.setValue("curTime", 0);
	}	
	
	// Calculate and set mutation rates according to n loci so we have a consistent per-genome rate
	u_g = genomelength * mu;
	u_q = u_g / nloci;
	u_n = u_g / (genomelength - nloci);
	
	// return early if we have no QTLs: mutation rate is always mu
	if (length(pos_QTL) == 0) {
		return;
	}
	
	ends = findMutBreakpoints(pos_QTL);

	// determine what rates to use: starting with neutral or qtl depending on whether we have a QTL at pos 0
	if (sort(pos_QTL)[0] == 0) {
		rates = rep(c(u_q, u_n), length(ends));
	} else {
		rates = rep(c(u_n, u_q), length(ends));
	}
	
	// shorten to match ends length
	rates = rates[0:(length(ends)-1)];	
		
	// get a vector of valuessa
	sim.chromosome.setMutationRate(rates, ends);

}

function (i) findMutBreakpoints(i pos) {
	// sort the list
	pos = sort(pos);
	
	// neutral breakpoints
	neuPos = pos - 1;
	
	// case where this is only 1 QTL
	if (length(pos) == 1) {
		result = c(neuPos[neuPos > -1], pos, genomelength-1);
		result = sort(unique(result));
		return result;
	}

	// collapse adjacent positions and exclude from breakpoints
	for (i in 1:(length(pos)-1)) {
		if (pos[i] == pos[i-1]+1) {
			pos[i-1] = -1;
			neuPos[i] = -1;
		}
	}
	pos = pos[pos > -1];
	neuPos = neuPos[neuPos > -1];

	// combine and add the last breakpoint (end of genome) if that isn't already sampled	
	pos = sort(c(pos, neuPos));
	if (pos[length(pos)-1] != genomelength - 1) {
		pos = c(pos, genomelength - 1);
	}
	
	// return sorted list
	return pos;		
}


function (void) CalcSelectionSigmas(s$ calcMode, [f$ minimumSigma = 0.1]) {
	// Calculate the strength of selection per trait, assuming equal contributions per trait

	// Get correct row in optimum matrix for the model
	traits = c(getOptTraits(optBurn, calcMode));
	n = size(traits);
	result = float(n);	
	
	// If any of the traits are zero, we need to set a minimum width for that trait
	traits[traits == 0] = minimumSigma;

	// change in fitnessCostDistance% of trait optimum over the distance for 5% change in fitness is sigma	
	
	result = ( fitnessCostDistance * traits ) / sqrt( -2 * log(1 - fitnessCost) );
	
	// Save output
	defineGlobal("optSigma", result);

}

function (io<MutationType>$) sampleMutTypeFromSite(i$ pos) {
	// Find the correct mutation type options for a given position and sample one
		
	// Additive case
	if (modelType == "Add") {
			// Additive/mult case: since we are additive/mult, we want to ignore mutTypes m4 onwards
		if (any(mut.position == pos_QTL)) {
			choice = sample(sim.mutationTypes[c(0,2)], 1);
		}
		else {
			choice = sample(sim.mutationTypes[0], 1);
		}

		if (isInteger(choice))
			return sim.mutationTypes[0];

		return choice;
	}

	molMuts = 7;

	// Set molMuts for different motifs
	if (modelType == "FFLC1" | modelType == "FFLI1") {
		molMuts = 9;
	}

	if (modelType == "FFBH") {
		molMuts = 11;
	}
	
	molMutProp = 1/molMuts;


		// If we are an ubiquitin QTL we're in the first molMutProp[0]% of the nloci loci in pos_QTL - we will take the 
		// ceiling of that to be consistent
		// We can only sample neutral, deleterious, and aZ: m1, m2, m3
		// If we are at an enhancer site we're in the second molMutProp[1]% of the nloci loci in pos_QTL
		// We can only sample neutral, deleterious, and bZ: m1, m2, m4
		// If we are at KZ site we're in the third molMutProp[2]% of the nloci loci in pos_QTL
		// We can only sample neutral, deleterious, and KZ: m1, m2, m5
		// If we are at KXZ site we're in the fourth molMutProp[3]% of the nloci loci in pos_QTL
		// We can only sample neutral, deleterious, and KXZ: m1, m2, m6

		// exit early if we aren't a QTL: return m1
		if (!any(pos == pos_QTL)) {
			return sim.mutationTypes[0];
		}
		
		// Iterate through mutation types, sample relevant mutation

		for (i in 1:(length(molMutCutoffs)-1)) {
			if (any(pos == pos_QTL[asInteger(molMutCutoffs[i-1]):asInteger(molMutCutoffs[i])])) {
				mutType = i + 1; // Offset by 1 to account for the deleterious mutation type
				return sample(sim.mutationTypes[c(0, mutType)], 1);
			}
		}		
		
		// if we somehow fail, stop the simulation
		stop(paste("sampleMutTypeFromSite: Failed to find mutation type for locus", pos));
}

function (void) calcPhenotype(o<Individual> inds, s$ calcMode) {
	// Calculate phenotypes for individuals based on their QTL effects - both segregating and substitutions
	// Handle additive first
	if (calcMode == "Add")
	{
	
		// Calculate phenotypes for individuals based on their QTL effects - both segregating and substitutions
		fixed = sim.substitutions;
		sizem3 = size(fixed[fixed.mutationType == m3]);
		fixedfx = sizem3 ? sum(fixed[fixed.mutationType == m3].selectionCoeff) else 0.0;
		
		for (ind in inds) {
			muts = ind.genomes.mutationsOfType(m3);			// Get only trait effects
			mutscount = size(muts);
			
			phenotype = (mutscount ? sum(muts.selectionCoeff) else 0.0);
			phenotype = phenotype + fixedfx; // add fixed effects
			if (calcMode == "Mult") {phenotype = exp(phenotype);}
			ind.phenotype = phenotype;
		}
		return;
	}

	// Handle ODEs
	numTraits = 3;
	if (calcMode == "NAR") { numTraits = 2; }
	if (calcMode == "FFBH") { numTraits = 4; }
	
	inds.setTraitValues(sim.ODEIntegrate(inds, calcMode), numTraits);
	return;

}

function (void) writeQuantileODEPar(o<Subpopulation> pop, [Nf quantiles = 0.5], [s$ type = "AUC"]) {
	// Write ODE parameter combinations - median value and IQR quantiles by default
	medianLine = paste(sim.cycle, asString(seed), modelindex, pop.getQuantileODEPar(quantiles, type), sep = ",");
	writeFile(outODEPars, medianLine, append = T);
}


function (void) writeAlleleData(void) {
	
	// Store vectors of unique mutations, sorted by the generation in which they originated
	muts = sortBy(c(sim.mutations[sim.mutations.mutationType != m1]), "originTick");
	
	// same for substitutions
	subs = sortBy(c(sim.substitutions[sim.substitutions.mutationType != m1]), "originTick");
	
	// Distance from the optimum - if we're in burn-in, distance is 0
	dist = (sim.cycle > burnTime) ? abs(mean(p1.individuals.getDistanceFromOptimum(optimum, optSigma))) else 0.0;
	
	// Set up an empty output to store all our mutations' information for this generation
	mutsLines = NULL;
	
	// Put information on these unique mutations into a separate mutations file	
	
	// Check if there are any substitutions, if not we need to fix the output lines	by not including the \n character at the end of the last mutation line. 
	// This is because writeFile() automatically adds a \n character, so we'd end up with an extra empty line if we do write that way
	
	genom = sim.subpopulations.genomes;
	
	for (mut in muts) {
		mutFreq = mean(genom.containsMutations(mut));
		mutCount = size(genom[genom.containsMutations(mut)]);
		mutType = mut.mutationType.id;
		mutValue = asString(mut.selectionCoeff);
		mutChi = mut.selectionCoeff * sqrt(1)/(2*dist);
		mutsLine = paste(sim.cycle, asString(seed), modelindex, mutType, mut.id, mut.position, mut.originTick, mutValue, mutChi, mutFreq, mutCount, "NA", sep = ",");
		mutsLine = paste0(mutsLine, "\n");
		mutsLines = paste0(mutsLines, mutsLine);
	
	}
	
	subCount = N*2;
	for (sub in subs) {
		subFreq = 1.0;
		subType = sub.mutationType.id;
		subValue = asString(sub.selectionCoeff);
		subChi = sub.selectionCoeff * sqrt(1/(2*dist));
		
		subLine = paste(sim.cycle, asString(seed), modelindex, subType, sub.id, sub.position, sub.originTick, subValue, subChi, subFreq, subCount, sub.fixationTick, sep = ",");
		subLine = paste0(subLine, "\n");
		
		mutsLines = paste0(mutsLines, subLine); // Add substitutions to mutation output
	
	}
	
	// Write the mutations file
	// Fail safe in case there are no mutations at some point and the for loop doesn't run
	if (exists('mutsLine') | exists('subLine'))
		writeFile(outMuts, mutsLines, append = T);
}

function (void) writeHetData(void) {
	hets = calcHeterozygosityAtPosition(p1.individuals, pos_QTL);
	hetFile = paste(sim.cycle, asString(seed), modelindex, hets, sep = ",");
	writeFile(outHet, hetFile, append = T);
}

function (float) calcFitnessWidth(f optimum, f$ distanceForDrop, f$ targetDrop) {
	// Calculate the width of each axis of the fitness function for a given distance from the optimum to drop X% fitness
	deviation = abs(optimum - (optimum * distanceForDrop));
	decayFactor = log(1 - targetDrop);
	variances = c((deviation * deviation) / (-2 * decayFactor));

	// Avoid negative/zero variances
	variances[variances < 1e-6] = 1e-6;

	return diag(variances, nrow = size(optimum));
}

function (float) getOptTraits(fi optimum, s$ calcMode) {
	// Calculate fitness from phenotype. Make sure this is only called after CalcPhenotype()!
	if (size(dim(optimum)) != 2) {
		stop("optimum must be a matrix with rows = motif and cols = traits");
	 }

	optIndex = 0;
	optMax = 1;
	if (calcMode == "PAR") { optIndex = 1; optMax = 2; }
	if (calcMode == "FFLC1") { optIndex = 2; optMax = 2; }
	if (calcMode == "FFLI1") { optIndex = 3; optMax = 2; }
	if (calcMode == "FFBH") { optIndex = 4; optMax = 3; }

	return optimum[optIndex, 0:optMax];

}

// TODO: This crashes every now and then with fitnessScaling < 0.0 - unsure as to why this might be happening
function (void) calcFitnessGaussian(o<Individual> inds, fi optTraits, s$ calcMode) {
	// Calculate fitness from phenotype. Make sure this is only called after CalcPhenotype()!

	sigma = calcFitnessWidth(optTraits, fitnessCostDistance, fitnessCost);

	// Index for the maximum trait index to get in the optimum matrix
	optMax = 2;
	if (calcMode == "NAR") { optMax = 1; }
	if (calcMode == "FFBH") { optMax = 3; }

	fitnessNorm = dmvnorm(c(optTraits), c(optTraits), sigma);

	traits = matrix(c(inds.getTraitValues(0:optMax)), ncol = optMax + 1, byrow = T);
	fitnesses = dmvnorm(traits, c(optTraits), sigma) / fitnessNorm;

	// Ensure we don't set fitnesses to 0 exactly, causes problems
	fitnesses[fitnesses <= 0.0] = 1e-6;
	inds.fitnessScaling = fitnesses; // Gaussian fitness function comes from Lande 1976
	
	// Make sure we never have all individuals with 0 fitness
	if (all(inds.fitnessScaling == 0.0)) { inds.fitnessScaling = 1e-6; }
	sim.setValue("fitness", inds.fitnessScaling);

}

function (float) calcNewOptimum(f oldOptimum, f widths, f dist) {
	n = size(oldOptimum);
	shifts = widths * sqrt(dist / n);
	optNew = oldOptimum + shifts;
	return optNew;
}

function (float) getMeanMolComps(o<Individual> inds) {
	// Get mean molecular component values
	molCompCount = size(molMutCutoffs) - 1;
	
	result = float(molCompCount);
	molTraits = inds.ODEPars;
	for (i in seqAlong(result)) {
		result[i] = mean(molTraits[seq(i, length(inds.ODEPars)-1, by = molCompCount)]);
	}
	
	return result;
}


function (void) writeQuantGenOutput(o<Subpopulation> pop, s$ phase) {
	// Write quant gen output for population statistics
	// phase is where in the simulation we are: burn-in, stabsel around burn-in mean, or adaptation
	// Slight differences between burnin, stab sel period, and test period - we need to account for those
	
	inds = pop.individuals;
	// Construct string output for data to write to file
	meanH = paste(calcHeterozygosity(pop.genomes), sep=",");
	VA = paste(calcVA(inds, sim.mutationTypes[2]));
	phenotypes = matrix(inds.traits, nrow = size(inds), byrow = T);
	trait1 = c(phenotypes[,0]);
	trait2 = c(phenotypes[,1]);
	trait3 = c(phenotypes[,2]);
	trait4 = c(phenotypes[,3]);

	meanTrait1 = mean(trait1);
	meanTrait2 = mean(trait2);
	meanTrait3 = mean(trait3);
	meanTrait4 = mean(trait4);
	varTrait1 = var(trait1);
	varTrait2 = var(trait2);
	varTrait3 = var(trait3);
	varTrait4 = var(trait4);

	phenomean = paste(meanTrait1, meanTrait2, meanTrait3, meanTrait4, sep = ",");
	phenovar = paste(varTrait1, varTrait2, varTrait3, varTrait4, sep = ",");

	w = mean(inds.fitnessScaling);

	meanMolTraits = getMeanMolComps(inds);

	// Pad mean mol traits to n = 11 for our largest number of mol comps (FFBH)
	padSize = 11 - size(meanMolTraits);

	if (padSize > 0) {
		pad = float(padSize);
		meanMolTraits = c(meanMolTraits, pad);
	}
	
	// If we are burning in, distance to optimum = 0, if we are in phase 2 then distance is relative to burninPheno,
	// otherwise relative to optimum
	// While here, we also have some other values to set for burn-in: there might not be a lastDist yet
	if (phase == "burnin") {
		// If we're in stabsel around burn-in pheno
		opt = c(getOptTraits(optBurn, modelType));
	} else if (phase == "adaptation") {
		// If we're in the shifted optimum phase
		opt = optimum;
	}
	
	dist = mean(inds.getDistanceFromOptimum(opt, optSigma));
	
	if (isNULL(sim.getValue("lastDist"))) {
		deltaPheno = 0.0;
	} else {
		deltaPheno = dist - sim.getValue("lastDist");
	}
	
	if (isNULL(sim.getValue("lastw"))) {
		deltaw = 0.0;
	} else {
		deltaw = w - sim.getValue("lastw");
	}
	
	
	sim.setValue("lastDist", dist);
	sim.setValue("lastw", w);
	
	
	if (sim.cycle == burnTime) {
//		sim.setValue("optimum", optFinal);
		catn("Optimum is: " + paste(optimum, sep = ",") + "\nStarting stabilising selection regime");
		OptFile = paste(asString(seed), modelindex, optimum, sep = ",");
		writeFile(outOpt, OptFile);

		// Recalculate distance	
		opt = optimum;
		dist = mean(inds.getDistanceFromOptimum(opt, optSigma));
	}
	
	
	Mfile = paste(sim.cycle, asString(seed), modelindex, meanH, VA, phenomean, phenovar, dist, w, deltaPheno, deltaw, meanMolTraits, sep=",");
	
	writeFile(outQG, Mfile, append = T);
}


function (integer) encodeCantorPairs(i x, i y) {
	return asInteger(0.5 * (x + y) * (x + y + 1) + y);
}

function (integer) decodeCantorPairs(i z) {
	w = floor((sqrt(8*z+1)-1) * 0.5);
	t = (w*w + w) * 0.5;
	
	y = asInteger(z - t);
	x = asInteger(w - y);
	return matrix(c(x, y), ncol = length(z), byrow = T);
}

// Return pairwise permutations of a vector
function (integer) perm(i x, [l$ includeDiag = F]) {
	// Create output matrix with all combinations
	y = rep(x, length(x));
	z = repEach(x, length(x));
	
	// Encode values with Cantor pair
	comb = encodeCantorPairs(y, z);	

	comboMatrix = matrix(comb, nrow = length(x));
	
	// Remove duplicates
	comboMatrix = comboMatrix[c(upperTri(comboMatrix, includeDiag))];
	
	// return matrix of x and y
	return decodeCantorPairs(comboMatrix); 
}

function (void) writeLDmat(o<Subpopulation> pop, l$ isBurnin) {
	// Writes the pairwise LD matrix into a .tsv file
	// isBurnin: is this the burnin matrix or the final matrix: just sets the filename
	LDMat = matrix(sim.calcLD(pop), nrow = genomelength, ncol = genomelength, byrow = T);
	l = sapply(seqLen(nrow(LDMat)), "paste(LDMat[applyValue,], sep = '\t');");
	writeFile(outLD[asInteger(!isBurnin)], l);
}

function (void) writeLDComp(o<Subpopulation> pop, l$ isD) {
	// Writes a pairwise LD matrix in compressed columnwise format
	// isD: 	whether to calculate r^2 or D' 
	LDResult = matrix(sim.calcLD(pop, isD), nrow = genomelength, ncol = genomelength, byrow = T);
	LDCompressed = CompressLDMatrix(LDResult[c(upperTri(LDResult))]);
	writeFile(outLDComp_Pos, LDCompressed[0], append = T);
	writeFile(outLDComp_Val, LDCompressed[1], append = T);
}


// Get variance-covariance matrix of molecular traits (P_M) - phenotypic variance-covariance matrix of molecular traits
function (void) writePMMatrix(o<Subpopulation> pop) {
inds = pop.individuals;
// Get molecular components
ODEPars = inds.ODEPars;
	numODEPars = size(inds[0].ODEPars);
	
	// Pad the output to our maximum number of ODEPars (11 for FFBH)
	paddedSize = 11;
	
	// For each component, we need to get the variances and covariances: in upper triangle of pairwise matrix
	// variances covariances stored in columnwise order of the diagonal 
	// (e.g. the matrix
	//	      [,0]  [,1]  [,2]
	//[0,]  "0,0" "0,1" "0,2"
	//[1,]    ""  "1,1" "1,2"
	//[2,]    ""    ""  "2,2"
	//
	// will be stored as (0,0), (0,1), (1,1), (0,2), (1,2), (2,2)
	
	numCovariances = sum(upperTri(diag(paddedSize), diag = T));
	covariances = float(numCovariances);
	
	// Index for result
	x = 0;
	
	// Covariances: Only want the unique combinations, upper triangle only
	for (j in 0:(numODEPars - 1)) {
		par1 = ODEPars[seq(j, size(ODEPars)-1, by = numODEPars)];
		for (k in j:(numODEPars - 1)) {
			par2 = ODEPars[seq(k, size(ODEPars)-1, by = numODEPars)];
			
			covariances[x] = cov(par1, par2);
			x = x + 1; // increment index
		}
	}	
		
	// Round really small values
	covariances = roundToDigits(covariances);

	// Genrate the file
file = paste(sim.cycle, asString(seed), modelindex, covariances, sep=",");
writeFile(outPMMat, file, append = T);
}

function (void) writeLDPairFile(o<Subpopulation> pop, s$ stat) {
	// Writes vector of pairwise LD comparisons sorted by frequency
	comp = perm(pos_QTL);
	LDResult = sim.calcLDBetweenSitePairs(pop, comp[0,], comp[1,], statistic = stat, byFreq = T);
	LDLine = paste(sim.cycle, asString(seed), modelindex, LDResult, sep = ",");
	writeFile(outLD, LDLine, append = T);
}

function (void) writeLDComp(o<Subpopulation> pop, s$ statistic) {
	// Writes a pairwise LD matrix in compressed columnwise format
	// statistic: 	The statistic to calculate (r^2, D, D')
	LDResult = matrix(sim.calcLD(pop, statistic), nrow = genomelength, ncol = genomelength, byrow = T);
	LDCompressed = CompressLDMatrix(LDResult[c(upperTri(LDResult))]);
	writeFile(outLDComp_Pos, LDCompressed[0], append = T);
	writeFile(outLDComp_Val, LDCompressed[1], append = T);
}

// Writes the frequencies and shared frequencies of pairs of mutations A and B
function (void) writeSharedMutFreqs(o<Subpopulation>$ pop) {
	pos = unique(pos_QTL);
	comb = perm(pos);
	result = sim.sharedMutFreqs(pop, comb[0,], comb[1,]);

	n = length(result);

	// First two values for every pair in results are integers: we need to cast so writing
	// doesn't round and store an incorrect mutation id
	idA = asString(asInteger(result[seq(from = 0, to = n-1, by = 7)]));
	idB = asString(asInteger(result[seq(from = 1, to = n-1, by = 7)]));
	pA = asString(result[seq(from = 2, to = n-1, by = 7)]);
	pB = asString(result[seq(from = 3, to = n-1, by = 7)]);
	pab = asString(result[seq(from = 4, to = n-1, by = 7)]);
	paB = asString(result[seq(from = 5, to = n-1, by = 7)]);
	pAb = asString(result[seq(from = 6, to = n-1, by = 7)]);

	result2 = c(rbind(idA, idB, pA, pB, pab, paB, pAb));

	out = paste(sim.cycle, asString(seed), modelindex, result2, sep = ",");
	writeFile(outSharedMutFreqs, out, append = T);
}

// Helper function to fix floating point rounding error
function (float) setSmallValToZero(float i) {
	return ifelse(i < 1e-10, 0.0, i);
}

// Write individual outputs: phenotypes for each individual in the population, and midparent value, 
// also alleles and moltraits
function (void) writeIndOutput(o<Subpopulation> pop) {
	inds = pop.sampleIndividuals(10);
	lines = NULL;
	
	//writeIndAlleleOutput(inds);
	
	for (ind in inds) {
		line = paste(sim.cycle, asString(seed), modelindex, ind.index, ind.ODEPars, sep = ",");
		line = paste0(line, "\n");
		lines = paste0(lines, line); // Add line to output
	}
	writeFile(outInd, lines, append = T);
}

function (void) savePopState(void) {
	sim.outputFull(outPopState, binary = T, pedigreeIDs = T);
}

function (void) writeHaploRel(o<Subpopulation>$ pop, i$ n) {
	inds = sample(pop.individuals, n);
	// Note: Using all sites instead of just the QTLs, see if this makes a difference
	// although, there's no linkage and technically these sites shouldn't describe any of the variance in phenotype (???)
	//	qtls = sort(sim.getValue("pos_QTL"));
		qtls = 0:(genomelength-1);
	
	// Extract haplotypes and qtl effect sizes
	haplos = matrix(sim.getHaplos(inds.genomes, qtls), 
												 nrow = length(inds.genomes), ncol = length(qtls), byrow = T);

	// Remove fixations and store separately
	colsToRemove = (colSums(haplos) == 2*n);
	if (size(colsToRemove)) {
		haploFixations = paste(sim.cycle, seed, modelindex, (0:(size(qtls)-1))[colsToRemove], sep = ",");
	}

	writeFile(outHaploFix, haploFixations, append = T);

	// Write FX with the fixed haplotypes included
	fx = paste(sim.cycle, seed, modelindex, getFX(qtls, StoreBinaryMatrix(haplos), length(inds.genomes), length(qtls)), sep=",");

	// Remove fixed from the haplotype store
	for (i in seqAlong(colsToRemove)) {
		haplos[, colsToRemove] = 0;
	}

	// compress haplotypes
	haplos = StoreBinaryMatrix(haplos);

	// Stick on generation and identifier data
	haplos = paste(sim.cycle, seed, modelindex, haplos, sep = ',');
	
	// Write output
	writeFile(outHaplo, haplos, append = T);
	writeFile(outFX, fx, append = T);
	
	phenos_out = paste(sim.cycle, seed, modelindex, inds.phenotype, sep=",");
	mol_out = paste(sim.cycle, seed, modelindex, inds.ODEPars, sep=",");
	
	writeFile(outPhenoSample, phenos_out, append = T);
	writeFile(outMolSample, mol_out, append = T);

	// relatedness matrix compression
	rel = matrix(inds.relatedness(inds), nrow = length(inds), byrow = T);
	
	// mask the relatedness matrix so we only store the upper triangle: don't need diagonal since it's always 1
	rel = rel[c(upperTri(rel))];
	
	// If a lot of values are 0, we can compress further: keep a file with non-zero elements,
	// and the matrix stores their positions only
	relPos = CompressRelatednessList(rel);	
	relValues = GetRelValues(rel, relPos);
	
	relPos = paste(c(asString(sim.cycle), asString(seed), asString(modelindex), asString(relPos)), sep = ",");
	relValues = paste(c(asString(sim.cycle), asString(seed), asString(modelindex), asString(relValues)), sep = ",");
		
	writeFile(outRelPos, relPos, append = T);
	writeFile(outRelVals, relValues, append = T);

}

function (void) writeHaplo(o<Subpopulation>$ pop, i$ n) {
	inds = pop.sampleIndividuals(n);
	// Note: Using all sites instead of just the QTLs, see if this makes a difference
	// although, there's no linkage and technically these sites shouldn't describe any of the variance in phenotype (???)
	//	qtls = sort(sim.getValue("pos_QTL"));
	qtls = 0:(genomelength-1);
	
	// Extract haplotypes and qtl effect sizes
	haplos = StoreBinaryMatrix(matrix(sim.getHaplos(inds.genomes, qtls), nrow = length(inds.genomes), ncol = length(qtls), byrow = T));
	fx = paste(sim.cycle, seed, modelindex, getFX(qtls, haplos, length(inds.genomes), length(qtls)), sep=",");
	
	
	// Stick on generation and identifier data
	haplos = paste(sim.cycle, seed, modelindex, haplos, sep = ',');
	// Write output
	// l = sapply(seqLen(nrow(haplos)), "paste(haplos[applyValue,], sep=',');");
	
	writeFile(outHaplo, haplos, append = T);
	writeFile(outFX, fx, append = T);
	
	phenos_out = paste(sim.cycle, seed, modelindex, inds.phenotype, sep=",");
	mol_out = paste(sim.cycle, seed, modelindex, inds.ODEPars, sep=",");
	
	writeFile(outPhenoSample, phenos_out, append = T);
	writeFile(outMolSample, mol_out, append = T);
}

function (integer) colSums(integer mat) {
	result = integer(ncol(mat));
	for (i in seqLen(ncol(mat))) {
		result[i] = sum(mat[,i]);
	}
	return result;
}

// returns positions of loci with nonzero elements (i.e. >= 1 ind with a mutation)
function (integer) binaryMatrixLoci(i haplos, i$ nrow, i$ ncol) {
	colCutoffs = asInteger((nrow * 1:ncol) - 1);	
	colSums = integer(ncol);
	
	for (i in seqAlong(colCutoffs)) {
			colSums[i] = length(haplos[haplos <= colCutoffs[i]]);
	}
	
	colSums = colSums - c(0, colSums[0:(ncol-2)]);
	
	return colSums;
}

function (integer) StoreBinaryMatrix(integer mat) {
	if (any(mat != 0 & mat != 1)) {
		stop("StoreBinaryMatrix called with a non-binary matrix!");
	}
	n = length(mat);
	return (0:(n-1))[c(asLogical(mat))];
} 

// Compresses relatedness matrix list: input is the upper triangle of the relatedness matrix excluding diagonals
function (integer) CompressRelatednessList(float upperTri) {
	return which(upperTri != 0);
} 

// Get the relationship coefficients at a given position in the upper triangle
function (float) GetRelValues(float upperTri, integer pos) {
	return upperTri[pos];
}

// Compress LD matrix to columnwise indices and nonzero LD: input is upper triangle of the 
// pairwise LD matrix excluding diagonals 
function (string) CompressLDMatrix(float LDUpperTri) {
	indicesFile = paste(sim.cycle, asString(seed), modelindex, CompressRelatednessList(LDUpperTri), sep = ",");
	valuesFile = paste(sim.cycle, asString(seed), modelindex, LDUpperTri[c(LDUpperTri != 0)], sep = ",");

	return c(indicesFile, valuesFile);
}

// Get phenotypic effects (additive scale) from a compressed binary haplotype matrix
function (float) getFX(integer pos, integer haplos, integer$ n, integer$ m) {
	if (length(haplos) == 0) {
		return float(0);
	}
	posToGet = pos[asLogical(binaryMatrixLoci(haplos, n, m))];
	result = float(length(posToGet));
	muts = sim.mutations[sim.mutations.mutationType != m1 & sim.mutations.mutationType != m2];
	
	for (i in seqLen(length(posToGet))) {
		result[i] = sum(muts[muts.position == posToGet[i]].selectionCoeff);
	
	}
	return result;
}

// returns positions of loci with nonzero elements (i.e. >= 1 ind with a mutation)
function (integer) binaryMatrixLoci(i haplos, i$ nrow, i$ ncol) {
	colCutoffs = asInteger((nrow * 1:ncol) - 1);	
	colSums = integer(ncol);
	
	for (i in seqAlong(colCutoffs)) {
			colSums[i] = length(haplos[haplos <= colCutoffs[i]]);
	}
	
	colSums = colSums - c(0, colSums[0:(ncol-2)]);
	
	return colSums;
}

function (integer) StoreBinaryMatrix(integer mat) {
	if (any(mat != 0 & mat != 1)) {
		stop("StoreBinaryMatrix called with a non-binary matrix!");
	}
	n = length(mat);
	return (0:(n-1))[c(asLogical(mat))];
} 

// Compresses relatedness matrix list: input is the upper triangle of the relatedness matrix excluding diagonals
function (integer) CompressRelatednessList(float upperTri) {
	return which(upperTri != 0);
} 

// Get the relationship coefficients at a given position in the upper triangle
function (float) GetRelValues(float upperTri, integer pos) {
	return upperTri[pos];
}

// Compress LD matrix to columnwise indices and nonzero LD: input is upper triangle of the 
// pairwise LD matrix excluding diagonals 
function (string) CompressLDMatrix(float LDUpperTri) {
	indicesFile = paste(sim.cycle, asString(seed), modelindex, CompressRelatednessList(LDUpperTri), sep = ",");
	valuesFile = paste(sim.cycle, asString(seed), modelindex, LDUpperTri[c(LDUpperTri != 0)], sep = ",");

	return c(indicesFile, valuesFile);
}

