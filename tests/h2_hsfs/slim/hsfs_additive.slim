// set up a simple neutral simulation
initialize() {
	if (!exists("slimgui")) {
		defineConstant("seed", getSeed());
	}
	else {
		setSeed(asInteger(round(runif(1, 1, 2^62 - 1))));
		defineConstant("seed", getSeed());
		catn("Actual seed: " + asInteger(seed));
	}
	
	defineConstant("wd", "/home/564/nb9894/tests/h2_hsfs/slim/"); //"/mnt/c/GitHub/SLiMTests/tests/h2_hsfs/slim/");
	// Load functions from file
	source(paste0(wd, "addFns.slim"));
	setCfgParam("debug", T); // Verbose debug outputs straight to stdout
	
	
	// Declare/define parameters if they haven't been by the command line arguments
	// Values from literature are cited
	// The realistic range of w^2 is 3-50, so 18 to 5000 for 2w^2, or 0.05556 to 0.0002 for 1/2w^2
	setCfgParam("mu", 9.1528e-6); // Mutation rate averaged across five species from Table 1 Aston et al. 2017 
	setCfgParam("N", 5000 ); // Population size
	setCfgParam("N_sires", 5); // Number of sires for sampling
	setCfgParam("N_dam", 20); // Number of dams per sire
	setCfgParam("N_perdam", 10); // Number of offspring per dam
	setCfgParam("N_samp", N_sires*N_dam*N_perdam); // Sample size for haplotypes etc.
	setCfgParam("del_mean", -1); // Mean used for the gamma distribution that deleterious mutations are pulled from
	setCfgParam("del_shape", 10); // Shape parameter for gamma distribution used for deleterious mutations
	setCfgParam("rwide", 0.5); // Whole genome recombination rate
	setCfgParam("nloci", 1000); // Number of QTL positions along the chromosome - where QTL mutations can appear, sampled from sample()
	setCfgParam("genomelength", 1000); // Loci across the genome - some are deleterious, others QTL, others neutral
	setCfgParam("locimu", 0.0); // Mean used for QTL mutation effect distribution pulls
	setCfgParam("locisigma", 1.0); // Variance used for QTL effect pulls - the additive effect size distribution
	setCfgParam("locidist", "n"); // Distribution used for locus distribution. "n" = normal, "g" = gamma
	setCfgParam("con_props", c(1.0, 0.0, 0.0)); // Proportion of genes that have low/medium/high substitution rate
	setCfgParam("constraints", matrix(c(1.0, 0.0, 1.0,
		5.0, 10.0, 1.0,
		50.0, 100.0, 1.0), ncol = 3, byrow = T)); // Matrix of lambdas: neutral/deleterious/beneficial weights in columns, rows are low/medium/high sub rate
	setCfgParam("width", 0.05);
	// TODO: Set this to a large value, adjust width also to have a longer adaptation period: measure the distribution of effects for adaptation!!!!
	setCfgParam("optBurn", 1); // Optimum during burn-in	
	setCfgParam("optShift", 1); // How far away optimum phenotype should be from mean phenotype post-burnin: Kingsolver et al. 2001 suggests .01 to 10 phenotypic units
	
	setCfgParam("printH", F); // Print values of heterozygosity over time during burn-in: used to decide how long burn-in needs to be
	setCfgParam("burnTime", 50000); // Number of generations of stabilising selection burn in
	setCfgParam("testTime", 2000); // Number of generations of test time: where selection is applied (or additional generations of drift, if selType = "d")
	setCfgParam("samplerate", c(500, 500)); // Sample rate in generations for phenotypic output (first value) and allelic output (second value)
	setCfgParam("testSampling", 50); // Sample rate during test period
	setCfgParam("adaptiveSampling", F); // Enable adaptive sampling rates to sample more often when phenotypes are changing rapidly. 
	setCfgParam("sampleLimits", c(0.1*samplerate, 5*samplerate)); // Set maximum and minimum sample rates to adjust between 
	
	setCfgParam("modelindex", 0); // Identifier for the combination of predictors used in latin hypercube: this is the row number 
	// in the lscombos.csv file
	setCfgParam("identifier", paste(asString(seed), modelindex, sep = "_")); // Unique identifier for the run - seed_modelindex
	
	// Set up the filesystem for saving data - thread safety, write to separate files for each run with unique names
	//	We write to /$PBS_JOBFS and copy all files of the same type after the full job is complete to a combined file
	// IMPORTANT: in the PBS script remember to cd $PBS_JOBFS
	
	setCfgParam("outPositions", paste0('slim_pos', identifier, '.csv')); // Output filename/path for locus positions
	setCfgParam("outQG", paste0('slim_qg', identifier, '.csv')); // Output filename/path for the trait means/variance
	setCfgParam("outOpt", paste0('slim_opt', identifier, '.csv')); // Output filename/path for the trait optimum values for each run
	setCfgParam("outMuts", paste0('slim_muts', identifier, '.csv')); //Output filename/path for the mutation information
	setCfgParam("outDict", paste0('slim_dict', identifier, '.csv')); // Output filename/path for dictionary of genetic constraints
	setCfgParam("outLD", c(paste0('slim_ld_burnin', identifier, '.tsv'),
		paste0('slim_ld_final', identifier, '.tsv'))); // Output filename/path for LD matrix (only generate one!)
	setCfgParam("outPed", paste0('slim_pedigree', identifier, '.csv')); // Output filepath for pedigree
	setCfgParam("outHaplo", paste0('slim_haplo', identifier, '.csv')); // Output filepath for haplotypes
	setCfgParam("outPhenoSample", paste0('slim_sampled_pheno', identifier, '.csv')); // Output filepath for sampled phenotypes
	setCfgParam("outGenMap", paste0('slim_genmap', identifier, '.csv')); // Output filepath for genetic map
	setCfgParam("outRel", paste0('slim_rel', identifier, '.csv')); // Output filepath for relatedness matrix
	setCfgParam("outFX", paste0('slim_fx', identifier, '.csv')); // Output filepath for effect sizes associated with haplotypes
	
	setCfgParam("outLD", c(paste0('out_stabsel_ld_burnin', identifier, '.tsv'),
		paste0('out_stabsel_ld_final', identifier, '.tsv'))); // Output filename/path for LD matrix (only generate one!)
	setCfgParam("moveDir", "/scratch/ht96/nb9894/h2_hsfs"); // Directory to move output to at end of simulation
	
	// Time tests
	setCfgParam("outTime", paste0('slim_time', identifier, '.csv'));
	
	if (debug == T)
		defineConstant("beginTime", clock());
	
	// Expected values for theta and heterozygosity at mutation-drift equilibrium	
	defineConstant("expTheta", 4*N*mu);
	defineConstant("expHe", expTheta/(1+expTheta));
	
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(keepPedigrees=T);
	
	initializeMutationRate(mu);
	
	initializeMutationType("m1", 0.5, "f", 0.0); // Neutral, non-trait-affecting mutations: also a place-holder for all mutation types before we set them
	
	//m2 mutation type: deleterious/background selection
	initializeMutationType("m2", 0.5, "g", del_mean, del_shape);  // del_mean and del_shape are defined in the batch run script, or the cfg parameters
	m2.color = "red";
	
	//m3 mutation type: QTL mutation
	initializeMutationType("m3", 0.5, locidist, locimu, locisigma);
	// m3.convertToSubstitution = F;
	m3.color = "green";
	
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	
	// uniform chromosome of length 100 kb with uniform recombination
	initializeGenomicElement(g1, 0, genomelength-1);
	initializeRecombinationRate(rwide);
}


1 {
	sim.addSubpop("p1", N);
	assignQTLPositions();
	
	// Activate script blocks for burn-in, stabilising selection around local optima, and test time post-environmental shift
	// s1: stabilising selection for X generations around
	// s2: Shift optimum, end the simulation and write/move output files 
	sim.rescheduleScriptBlock(s1, start = 1, end = burnTime);
	sim.rescheduleScriptBlock(s2, start = burnTime+1, end = burnTime + testTime);
	
	// Script blocks for reproduction callbacks: burn-in vs test period
	sim.rescheduleScriptBlock(s3, start = 2, end = burnTime);
	sim.rescheduleScriptBlock(s4, start = burnTime+1, end = burnTime + testTime);

}
// Burn-in under stabilising selection
s3 reproduction() {
	inds = p1.individuals;
	fitness = p1.cachedFitness(NULL);
	parent1 = sample(inds, N, replace = T, weights = fitness);
	parent2 = sample(inds, N, replace = T, weights = fitness);
	
	for (i in seqLen(N))
		p1.addCrossed(parent1[i], parent2[i]);
	
	self.active = 0;
}
// full-sib half-sib mating design: we want to keep variability around though,
// so we still sample the rest of the population according to the regular rules
s4 reproduction() {
	// Only do the mating design a generation before we sample
	if (!((sim.generation+1) % testSampling) | (sim.generation+1) == burnTime | (sim.generation+1) == (burnTime+testTime)) {
		diff = N - N_samp;
	} else {
		diff = N;
	}
	
	inds = p1.individuals;
	fitness = p1.cachedFitness(NULL);
	parent1 = sample(inds, diff, replace = T, weights = fitness);
	parent2 = sample(inds, diff, replace = T, weights = fitness);
	
	for (i in seqLen(diff))
		p1.addCrossed(parent1[i], parent2[i]);

	
	// Mating design for the rest of the offspring: 
	// tag these offspring with 1 so we know they are part of the design
	if (diff < N) {
		sires = p1.sampleIndividuals(N_sires);
		for (sire in sires) {
			dams = p1.sampleIndividuals(N_dam, exclude = sire);
			for (dam in dams) {
				for (offspring in seqLen(N_perdam)) {
					p1.addCrossed(sire, dam);
				}
			}
		}
	}
	
	self.active = 0;
}


early() {
	p1.individuals[p1.individuals.age > 0].fitnessScaling = 0.0;
}


mutation(m1) {
	con_dict = sim.getValue("con_dict");
	dict_pos = match(mut.position, con_dict[0,]); // Get the position in the dictionary matrix of the mutation's location
	gene_constraint = constraints[c(con_dict[1, dict_pos]),]; // Get the correct constraints for the gene
	
	if (any(mut.position == sim.getValue("pos_QTL"))) {
		choice = sample(sim.mutationTypes, 1, weights = gene_constraint);
	}
	else {
		choice = sum(gene_constraint[0:1]) ? sample(sim.mutationTypes[0:1], 1, weights = gene_constraint[0:1]) else -1;
	}
	
	if (isInteger(choice))
		return F;
	
	mut.setMutationType(choice);
	mut.setSelectionCoeff(mut.mutationType.drawSelectionCoefficient());
	
	return T;
}


fitness(m3) {
	return 1.0;
}


// Burn-in
s1 late() {
	inds = p1.individuals;
	calcPhenotype(inds, sim.substitutions);
	calcFitnessGaussian(inds, optBurn);
	
	// Check if we're at the end of burn-in: if we are, write output for alphasim
	if (sim.generation == burnTime) {
		writeLDmat(p1, T);
		writeGenMap();
		writeHaploPed(p1, N_samp);
	}
	
	
	// Check if we are sampling type 1 output this generation (quant gen)
	if (sim.generation % samplerate[0])
		return;
	
	writeQuantGenOutput(p1, "burnin");
	
	if (debug)
		writeTimeData();
	
	// Check if we are sampling type 2 output this generation (alleles)
	if (sim.generation % samplerate[1])
		return;
	writeAlleleData();
	

}

// Adaptation + output
s2 late() {
	inds = p1.individuals;
	calcPhenotype(inds, sim.substitutions);
	calcFitnessGaussian(inds, sim.getValue("optimum"));
	
	
	if (sim.generation == (burnTime + testTime)) {
		// Write last output
		writeQuantGenOutput(p1, "adaptation");
		
		
		// Write LD output and pedigree/heritability stuff
		writeLDmat(p1, F);
		writeHaploPed(p1, N_samp);
		
		// Move output to scratch storage
		system(paste0("mv ./", outPositions, " ", moveDir));
		system(paste0("mv ./", outQG, " ", moveDir));
		system(paste0("mv ./", outOpt, " ", moveDir));
		system(paste0("mv ./", outMuts, " ", moveDir));
		system(paste0("mv ./", outDict, " ", moveDir));
		system(paste0("mv ./", outLD[0], " ", moveDir));
		system(paste0("mv ./", outLD[1], " ", moveDir));
		system(paste0("mv ./", outPed, " ", moveDir));
		system(paste0("mv ./", outHaplo, " ", moveDir));
		system(paste0("mv ./", outPhenoSample, " ", moveDir));
		//		system(paste0("mv ./", outRel, " ", moveDir));
		system(paste0("mv ./", outGenMap, " ", moveDir));
		system(paste0("mv ./", outFX, " ", moveDir));
		
		if (debug) {
			writeTimeData();
			system(paste0("mv ./", outTime, " ", moveDir));
		}
		
		sim.simulationFinished();
		return;
	}
	
	// Check if we're sampling this generation
	if (sim.generation % testSampling)
		return;
	
	writeHaploPed(p1, N_samp);
	writeQuantGenOutput(p1, "adaptation");
	writeAlleleData();
	
	if (debug)
		writeTimeData();

}
