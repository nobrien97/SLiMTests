// set up a simple neutral simulation
initialize() {
	if (!exists("slimgui")) {
		defineConstant("seed", getSeed());
	}
	else {
		setSeed(asInteger(round(runif(1, 1, 2^62 - 1))));
		defineConstant("seed", getSeed());
		catn("Actual seed: " + asInteger(seed));
	}
	
	
	defineConstant("wd", "/home/564/nb9894/tests/h2/slim/"); //"/mnt/c/GitHub/SLiMTests/tests/h2/slim/");
	// Load functions from file
	source(paste0(wd, "netFns.slim"));
		setCfgParam("debug", T); // Verbose debug outputs straight to stdout
	
	// Declare/define parameters if they haven't been by the command line arguments
	// Values from literature are cited
	// The realistic range of w^2 is 3-50, so 18 to 5000 for 2w^2, or 0.05556 to 0.0002 for 1/2w^2
	setCfgParam("mu", 9.1528e-6); // Mutation rate averaged across two samples of A. thaliana from Table 1 Aston et al. 2017, transformed to per locus by multiplying by 1346 (Xu et al. 2006) 
	setCfgParam("N", 10000); // Population size
	setCfgParam("N_samp", 500); // Sample size for haplotypes etc.
	setCfgParam("del_mean", -1); // Mean used for the gamma distribution that deleterious mutations are pulled from
	setCfgParam("del_shape", 10); // Shape parameter for gamma distribution used for deleterious mutations
	setCfgParam("rwide", 0.5); // Whole genome recombination rate
	setCfgParam("nloci", 8); // Number of U and E sites along the chromosome
	setCfgParam("ueProp", 0.5); // Proportion of Ubiquitinylation regulators vs enhancers among the n loci
	setCfgParam("genomelength", 100); // Loci across the genome - some are deleterious, others QTL, others neutral
	setCfgParam("locimu", 0.0); // Mean used for QTL mutation effect distribution pulls
	setCfgParam("locisigma", 1.0); // Variance used for QTL effect pulls - the effect size distribution
	setCfgParam("locidist", paste0("exp(rnorm(1,", locimu, ",", locisigma, "));"));
	setCfgParam("con_props", c(1.0, 0.0, 0.0)); // Proportion of genes that have low/medium/high substitution rate
	setCfgParam("constraints", matrix(c(1.0, 0.0, 1.0, 1.0, 1.0, 1.0,
													5.0, 10.0, 1.0, 1.0, 1.0, 1.0,
													50.0, 100.0, 1.0, 1.0, 1.0, 1.0), 
		ncol = 6, byrow = T)); // Matrix of lambdas: m1/m2/m3/m4/m5/m6 weights in columns, rows are low/medium/high sub rate

	setCfgParam("width", 0.05);	// Set so 1 phenotypic unit deviation is a 20% drop in fitness
	// TODO: Set this to a large value, adjust width also to have a longer adaptation period: measure the distribution of effects for adaptation!!!!	
	setCfgParam("optBurn", 1); // Optimum during burn-in	
	setCfgParam("optShift", 1); // How far away optimum phenotype should be from mean phenotype post-burnin: Kingsolver et al. 2001 suggests .01 to 10 phenotypic units
	
	setCfgParam("printH", F); // Print values of heterozygosity over time during burn-in: used to decide how long burn-in needs to be
	setCfgParam("burnTime", 100000); // Number of generations of neutral burn-in before the test period
	setCfgParam("testTime", 2000); // Number of generations of test time: where selection is applied (or additional generations of drift, if selType = "d")
	setCfgParam("samplerate", c(500, 500)); // Sample rate in generations for phenotypic output (first value) and allelic output (second value)
	setCfgParam("testSampling", 20); // Sample rate during test period
	setCfgParam("adaptiveSampling", F); // Enable adaptive sampling rates to sample more often when phenotypes are changing rapidly. 
	setCfgParam("sampleLimits", c(0.1*samplerate, 5*samplerate)); // Set maximum and minimum sample rates to adjust between 
	
	setCfgParam("modelindex", 1); // Identifier for the combination of predictors used in latin hypercube: this is the row number 
											// in the lscombos.csv file
	setCfgParam("identifier", paste(asString(seed), modelindex, sep = "_")); // Unique identifier for the run - seed_modelindex
		
	// Set up the filesystem for saving data - thread safety, write to separate files for each run with unique names
	//	We write to /$PBS_JOBFS and copy all files of the same type after the full job is complete to a combined file
	// IMPORTANT: in the PBS script remember to cd $PBS_JOBFS

	setCfgParam("outPositions", paste0('slim_pos', identifier, '.csv')); // Output filename/path for locus positions
	setCfgParam("outQG", paste0('slim_qg', identifier, '.csv')); // Output filename/path for the trait means/variance
	setCfgParam("outOpt", paste0('slim_opt', identifier, '.csv')); // Output filename/path for the trait optimum values for each run
	setCfgParam("outMuts", paste0('slim_muts', identifier, '.csv')); //Output filename/path for the mutation information
	setCfgParam("outDict", paste0('slim_dict', identifier, '.csv')); // Output filename/path for dictionary of genetic constraints
	setCfgParam("outLD", c(paste0('slim_ld_burnin', identifier, '.tsv'),
						   paste0('slim_ld_final', identifier, '.tsv'))); // Output filename/path for LD matrix (only generate one!)
	setCfgParam("outODEPars", paste0('slim_medodepar', identifier, '.csv')); // Output filename/path for the median ODE parameter combination
	setCfgParam("outGMat", paste0('slim_gmat', identifier, '.csv')); // Output filename/path for the molecular trait G matrices
	setCfgParam("outInd", paste0('slim_indPheno', identifier, '.csv')); // Output filename/path for individual phenotype data
	setCfgParam("outPed", paste0('slim_pedigree', identifier, '.csv')); // Output filepath for pedigree
	setCfgParam("outHaplo", paste0('slim_haplo', identifier, '.csv')); // Output filepath for haplotypes
	setCfgParam("outPhenoSample", paste0('slim_sampled_pheno', identifier, '.csv')); // Output filepath for sampled phenotypes
	setCfgParam("outGenMap", paste0('slim_genmap', identifier, '.csv')); // Output filepath for genetic map
	setCfgParam("outRel", paste0('slim_rel', identifier, '.csv')); // Output filepath for relatedness matrix
	setCfgParam("outFX", paste0('slim_fx', identifier, '.csv')); // Output filepath for effect sizes associated with haplotypes

	setCfgParam("moveDir", "/scratch/ht96/nb9894/h2/"); // Directory to move output to at end of simulation

	// Time tests
	setCfgParam("outTime", paste0('slim_time', identifier, '.csv'));

	if (debug == T)
		defineConstant("beginTime", clock());
		
	// Expected values for theta and heterozygosity at mutation-drift equilibrium	
	defineConstant("expTheta", 4*N*mu);
	defineConstant("expHe", expTheta/(1+expTheta));

	
	initializeSLiMOptions(keepPedigrees=T);
//	initializeTreeSeq();
	initializeMutationRate(mu);
	
	// m1 mutation type: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	
	// m2 mutation type: background
	initializeMutationType("m2", 0.5, "n", 0.0, 1.0);
	
	//m3 mutation type: aZ mutation
	initializeMutationType("m3", 0.5, "s", locidist);
	m3.color = "green";
	
	//m4 mutation type: bZ mutation
	initializeMutationType("m4", 0.5, "s", locidist);
	m4.color = "blue";
	
	//m5 mutation type: KZ mutation
	initializeMutationType("m5", 0.5, "s", locidist);
	m5.color = "cyan";

	//m6 mutation type: KXZ mutation
	initializeMutationType("m6", 0.5, "s", locidist);
	m6.color = "purple";

	
	m2.color = "blue";
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	
	// uniform chromosome of length 100 kb with uniform recombination
	initializeGenomicElement(g1, 0, genomelength-1);
	initializeRecombinationRate(rwide);
	
}

1 first() {
	assignQTLPositions();
}


mutation(m1) {
	// Set the new mutation type according to a randomly sampled mutation type that is available at a certain site
	mut.setMutationType(sampleMutTypeFromSite(mut.position));
	mut.setSelectionCoeff(mut.mutationType.drawSelectionCoefficient());
	
	return T;
}

fitness(m2) {
	return 1.0;
}

fitness(m3) {
	return 1.0;
}
fitness(m4) {
	return 1.0;
}
fitness(m5) {
	return 1.0;
}
fitness(m6) {
	return 1.0;
}


// create a population of 500 individuals
1 {
	sim.addSubpop("p1", N);
	assignQTLPositions();
	// Activate script blocks for burn-in, stabilising selection around local optima, and test time post-environmental shift
	// s1: stabilising selection for X generations around
	// s2: Shift optimum, end the simulation and write/move output files 
	sim.rescheduleScriptBlock(s1, start = 1, end = burnTime);
	sim.rescheduleScriptBlock(s2, start = burnTime+1, end = burnTime + testTime);

}

// Burn in
s1 late() { 
	inds = p1.individuals;
	calcPhenotype(inds);
	calcFitnessGaussian(inds, optBurn);
	
	// Check if we're at the end of burn-in
	if (sim.generation == burnTime) {
		writeLDmat(p1, T);
		writeGenMap();
		writeHaploPed(p1, N_samp);

	}		

	
	// Check if we are sampling type 1 output this generation (quant gen)
	if (sim.generation % samplerate[0])
		return;
		
	writeQuantGenOutput(p1, "burnin");
	
	// Check if we are sampling type 2 output this generation (alleles)
	if (sim.generation % samplerate[1])
		return;
	writeAlleleData();

}

s2 late() { 
	inds = p1.individuals;
	calcPhenotype(inds);
	calcFitnessGaussian(inds, sim.getValue("optimum"));
	
	
	if (sim.generation == (burnTime + testTime)) {
		// Write last output
		writeQuantGenOutput(p1, "adaptation");
		
		// Write LD output and pedigree/heritability stuff
		writeLDmat(p1, F);
		writeGenMap();
		writeHaploPed(p1, N_samp);
		
		// Move output to scratch storage
		system(paste0("mv ./", outPositions, " ", moveDir));
		system(paste0("mv ./", outQG, " ", moveDir));
		system(paste0("mv ./", outOpt, " ", moveDir));
		system(paste0("mv ./", outMuts, " ", moveDir));
		system(paste0("mv ./", outDict, " ", moveDir));
		system(paste0("mv ./", outLD[0], " ", moveDir));
		system(paste0("mv ./", outLD[1], " ", moveDir));
		system(paste0("mv ./", outPed, " ", moveDir));
		system(paste0("mv ./", outHaplo, " ", moveDir));
		system(paste0("mv ./", outPhenoSample, " ", moveDir));
//		system(paste0("mv ./", outRel, " ", moveDir));
		system(paste0("mv ./", outGenMap, " ", moveDir));
		system(paste0("mv ./", outFX, " ", moveDir));
		

		if (debug)
			system(paste0("mv ./", outTime, " ", moveDir));
			
		sim.simulationFinished();
		return;
	}		
	
	// Check if we're sampling this generation
	if (sim.generation % testSampling) 
		return;
	
	writeGenMap();
	writeHaploPed(p1, N_samp);

	writeQuantGenOutput(p1, "adaptation");
	writeAlleleData();

}

