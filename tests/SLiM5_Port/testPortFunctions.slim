// set up a simple neutral simulation
initialize() {
	setCfgParam("width", 0.05);	// Set so 1 phenotypic unit deviation is a 5% drop in fitness

	initializeMutationRate(1e-6);

	// m1 mutation type: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 0.5, "f", 0.0);
	initializeMutationType("m3", 0.5, "n", 0.0, 1.0);
	initializeMutationType("m4", 0.5, "n", 0.0, 1.0);
	initializeMutationType("m5", 0.5, "n", 0.0, 1.0);
	initializeMutationType("m6", 0.5, "n", 0.0, 1.0);

	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", c(m3, m4, m5, m6), c(1.0, 1.0, 1.0, 1.0));
	
	// uniform chromosome of length 100 kb with uniform recombination
	initializeGenomicElement(g1, 0, 999);
	initializeRecombinationRate(1e-8);
}

mutationEffect(m3) {
	return 1.0;
}

mutationEffect(m4) {
	return 1.0;
}

mutationEffect(m5) {
	return 1.0;
}

mutationEffect(m6) {
	return 1.0;
}

function (void) setCfgParam(s$ name, ifls value) {
	// Automate defining constants for SLiMgui and slim command line
	
	if (!exists(name)) {
		defineConstant(name, value);
	}
}


function (void) writeHaploPed(o<Subpopulation>$ pop, i$ n) {
	// Note: Using all sites instead of just the QTLs, see if this makes a difference
	// although, there's no linkage and technically these sites shouldn't describe any of the variance in phenotype (???)
	//	qtls = sort(sim.getValue("pos_QTL"));
	qtls = 0:(sim.chromosome.lastPosition);
	inds = p1.sampleIndividuals(n);
	// Extract haplotypes and qtl effect sizes
	haplos = matrix(sim.getHaplos(inds.genomes, qtls), nrow = length(inds.genomes), ncol = length(qtls), byrow = T);	
	
	// Stick on generation and identifier data
	haplos = cbind(rep(sim.cycle, nrow(haplos)),
		rep(123, nrow(haplos)),
		rep(1, nrow(haplos)),
		haplos);
	// Write output
	l = sapply(seqLen(nrow(haplos)), "paste(haplos[applyValue,], sep=',');");
	catn(l);
}

function (void) writeHetData(void) {
	hets = calcHeterozygosityAtPosition(p1.individuals, 600:609);
	hetFile = paste(sim.cycle, asString(123), 1, hets, sep = ",");
	catn(hetFile);
}

function (void) writeLDmat(o<Subpopulation> pop) {
	// Writes the pairwise LD matrix into a .tsv file
	// isBurnin: is this the burnin matrix or the final matrix: just sets the filename
	LDMat = matrix(sim.pairwiseR2(pop), nrow = sim.chromosome.lastPosition+1, ncol = sim.chromosome.lastPosition+1, byrow = T);
	l = sapply(seqLen(nrow(LDMat)), "paste(LDMat[applyValue,], sep = '\t');");
	catn(l);
}

function (void) writeQuantileODEPar(o<Subpopulation> pop, [Nf quantiles = 0.5], [s$ type = "AUC"]) {
	// Write ODE parameter combinations - median value and IQR quantiles by default
	medianLine = paste(sim.cycle, asString(123), 1, pop.getQuantileODEPar(quantiles, type), sep = ",");
	catn(medianLine);
}


function (void) calcFitnessGaussian(o<Individual> inds, fi$ optimum) {
	// Calculate fitness from phenotype. Make sure this is only called after CalcPhenotype()!
	phenotypes = inds.phenotype;
	dists = (phenotypes - optimum)^2;
	
	// Make sure that phenotype is never below 0
	dists[dists < 0] = 0.0;
	
	inds.fitnessScaling = exp(-(dists * width)); // Gaussian fitness function comes from Lande 1976: width is 1/2w^2
	// Make sure we never have all individuals with 0 fitness
	if (all(inds.fitnessScaling == 0.0)) { inds.fitnessScaling = 1e-6; }
	sim.setValue("fitness", inds.fitnessScaling);

}

function (void) calcPhenotype(o<Individual> inds, s$ calcMode) {
	// Calculate phenotypes for individuals based on their QTL effects - both segregating and substitutions
	if (calcMode == "ODE")
	{
		inds.phenotype = sim.NARIntegrate(inds);
		return;
	}
	
	// Calculate phenotypes for individuals based on their QTL effects - both segregating and substitutions
	fixed = sim.substitutions;
	sizem3 = size(fixed[fixed.mutationType == m3]);
	fixedfx = sizem3 ? sum(fixed[fixed.mutationType == m3].selectionCoeff) else 0.0;
	
	for (ind in inds) {
		muts = ind.genomes.mutationsOfType(m3);			// Get only trait effects
		mutscount = size(muts);
		
		phenotype = (mutscount ? sum(muts.selectionCoeff) else 0.0);
		phenotype = phenotype + fixedfx; // add fixed effects
		if (calcMode == "Mult") {phenotype = exp(phenotype);}
		ind.phenotype = phenotype;
	}
	return;

}

// create a population of 500 individuals
1 early() {
	sim.addSubpop("p1", 500);
}

1:100000 late() {
	calcPhenotype(p1.individuals, "ODE");
	calcFitnessGaussian(p1.individuals, 2);
}
